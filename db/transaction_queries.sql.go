// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: transaction_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransactions = `-- name: CreateTransactions :exec
INSERT INTO transactions (id, transaction_value, product_description, card_number, name_in_card, card_expiration_date, cvv) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateTransactionsParams struct {
	ID                 uuid.UUID       `json:"id"`
	TransactionValue   sql.NullFloat64 `json:"transaction_value"`
	ProductDescription sql.NullString  `json:"product_description"`
	CardNumber         sql.NullInt64   `json:"card_number"`
	NameInCard         sql.NullString  `json:"name_in_card"`
	CardExpirationDate sql.NullTime    `json:"card_expiration_date"`
	Cvv                sql.NullInt32   `json:"cvv"`
}

func (q *Queries) CreateTransactions(ctx context.Context, arg CreateTransactionsParams) error {
	_, err := q.db.ExecContext(ctx, createTransactions,
		arg.ID,
		arg.TransactionValue,
		arg.ProductDescription,
		arg.CardNumber,
		arg.NameInCard,
		arg.CardExpirationDate,
		arg.Cvv,
	)
	return err
}

const deleteTransactions = `-- name: DeleteTransactions :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransactions(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransactions, id)
	return err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, transaction_value, product_description, card_number, name_in_card, card_expiration_date, cvv FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionValue,
		&i.ProductDescription,
		&i.CardNumber,
		&i.NameInCard,
		&i.CardExpirationDate,
		&i.Cvv,
	)
	return i, err
}

const gettransactions = `-- name: Gettransactions :many
SELECT id, transaction_value, product_description, card_number, name_in_card, card_expiration_date, cvv FROM transactions
`

func (q *Queries) Gettransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, gettransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TransactionValue,
			&i.ProductDescription,
			&i.CardNumber,
			&i.NameInCard,
			&i.CardExpirationDate,
			&i.Cvv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatetransactionsName = `-- name: UpdatetransactionsName :exec
UPDATE transactions SET card_number = $1 WHERE id = $2
`

type UpdatetransactionsNameParams struct {
	CardNumber sql.NullInt64 `json:"card_number"`
	ID         uuid.UUID     `json:"id"`
}

func (q *Queries) UpdatetransactionsName(ctx context.Context, arg UpdatetransactionsNameParams) error {
	_, err := q.db.ExecContext(ctx, updatetransactionsName, arg.CardNumber, arg.ID)
	return err
}
